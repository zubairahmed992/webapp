<?php

namespace LoveThatFit\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MarketingTilesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarketingTilesRepository extends EntityRepository
{	
    public function findAllAvailableRecords()
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT c FROM LoveThatFitAdminBundle:MarketingTiles c where c.disabled=0  order by c.id,c.sorting, c.title');
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
        
    public function findAllRecord()
    {
      $query = $this->getEntityManager()
                ->createQuery('SELECT c FROM LoveThatFitAdminBundle:MarketingTiles c order by c.id,c.sorting, c.title');
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function findMarketingTiles($disabled=0)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('
                mt.id, mt.title, mt.description, 
                mt.image, mt.button_title, 
                mt.button_action, mt.target_url,
                mt.created_at')
            ->from('LoveThatFitAdminBundle:MarketingTiles', 'mt')
            ->where('mt.disabled = :disabled')
            ->setParameter('disabled', $disabled)
            ->orderBy('mt.sorting', 'ASC')
            ->getQuery();
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
  
#------------------------------------------------------------------------------#  
  public function getRecordsCountWithCurrentMarketingTilesLimit($marketing_tiles){
     $query = $this->getEntityManager()
                    ->createQuery("SELECT count(c.id) as id  FROM LoveThatFitAdminBundle:MarketingTiles c WHERE c.id <=:marketing_tiles")
                   ->setParameters(array('marketing_tiles' => $marketing_tiles));
                     try {
                     return $query->getResult();
                } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
                }
  }  

#--------------Find Banner By ID---------------------------------#
  public function findById($id){
       $query = $this->getEntityManager()
                        ->createQuery("
     SELECT ct.name as name,ct.cat_id as target FROM LoveThatFitAdminBundle:MarketingTiles ct
     WHERE
     ct.id=:id     
    "  )->setParameters(array('id' => $id)) ;
        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
      
  }


#--------------Find Banner with Category Name By ID--  -------------------------------#
    public function findWithMarketingTilesId($id){

        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('
                    mt.id,
                    mt.title,
                    mt.image,
                    mt.description,
                    mt.button_title,
                    mt.button_action,
                    mt.sorting,
                    mt.disabled,
                    mt.created_at'
                )
            ->from('LoveThatFitAdminBundle:MarketingTiles', 'mt')
            ->where('mt.id = :id')
            ->setParameter('id', $id);


        try {

            return $query->getQuery()->setMaxResults(1)->getResult();//$query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }

#--------------Find Banner By ID---------------------------------#
    public function search(
        $data,
        $page = 0,
        $max = NULL,
        $order,
        $getResult = true
    )
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $search = isset($data['query']) && $data['query']?$data['query']:null;
        $query
            ->select('
            mt.id,
            mt.title,
            mt.button_title,
            mt.button_action,
            mt.image,
            mt.disabled,
            mt.created_at'
            )
            ->from('LoveThatFitAdminBundle:MarketingTiles', 'mt');
        if ($search) {
            $query
                ->where('mt.title like :search')
                ->setParameter('search', "%".$search."%");
        }
        if (is_array($order)) {
            $orderByColumn    = $order[0]['column'];
            $orderByDirection = $order[0]['dir'];
            $query->OrderBy("mt.id", $orderByDirection);
        }

        if ($max) {
            $preparedQuery = $query->getQuery()
                ->setMaxResults($max)
                ->setFirstResult(($page) * $max);
        } else {
            $preparedQuery = $query->getQuery();
        }
        return $getResult?$preparedQuery->getResult():$preparedQuery;
    }

    #--------------Increamental and Decreamental on Banner Sorrting---------------------------------#
    public function editBannerSorting($sorting_number, $action, $current_value = 0){

        $marketingtilesTableName = $this->getEntityManager()->getClassMetadata('LoveThatFitAdminBundle:MarketingTiles')->getTableName();

        if($action == 'add'){
            $sql = "UPDATE $marketingtilesTableName SET sorting = sorting + 1 where sorting >= :sorting_number ";
        }elseif($action == 'delete'){
            $sql = "UPDATE $marketingtilesTableName SET sorting = sorting - 1 where sorting >= :sorting_number ";
        }elseif($action == 'update'){
            
            if($current_value > $sorting_number){
                //if current move to less position then +1
                $sql = "UPDATE $marketingtilesTableName SET sorting = sorting + 1 where sorting >= :sorting_number AND sorting <= :current_value ";

            }elseif($current_value < $sorting_number){
                $sql = "UPDATE $marketingtilesTableName SET sorting = sorting - 1 where sorting >= :current_value AND sorting <= :sorting_number ";
            }
            $params['current_value'] = $current_value;
        }
        //set parameters
        $params['sorting_number'] = $sorting_number;
        $query = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $result = $query->execute($params);

        return true;
    }


    #--------------Increamental and Decreamental on Banner Sorrting---------------------------------#
    public function maxSortingNumber(){
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('MAX(mt.sorting) as max_sort')
            ->from('LoveThatFitAdminBundle:MarketingTiles', 'mt');
        try {
            return $query->getQuery()->setMaxResults(1)->getResult();//$query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }

    }



}

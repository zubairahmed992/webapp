<?php

namespace LoveThatFit\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SizeChartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SizeChartRepository extends EntityRepository {

    public function findAllSizeChart($page_number = 0, $limit = 0, $sort = 'id') {

        if ($page_number <= 0 || $limit <= 0) {
            $query = $this->getEntityManager()
                    ->createQuery('SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc ORDER BY sc.' . $sort . ' ASC');
        } else {
            $query = $this->getEntityManager()
                    ->createQuery('SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc ORDER BY sc.' . $sort . ' ASC')
                    ->setFirstResult($limit * ($page_number - 1))
                    ->setMaxResults($limit);
        }
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function countAllSizeChartRecord() {
        $total_record = $this->getEntityManager()
                ->createQuery('SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc');
        try {
            return $total_record->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function findBrandSizeBy($brand, $title, $gender, $target) {
        $total_record = $this->getEntityManager()
                        ->createQuery("SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc
            JOIN sc.brand b
     WHERE
     b.id=:brand
     AND sc.title = :title
     AND sc.gender=:gender
     AND sc.target=:target"
                        )->setParameters(array('brand' => $brand, 'title' => $title, 'gender' => $gender, 'target' => $target));
        try {
            return $total_record->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    
    //------------------------------------------------------------------------

    public function getBrandsByTarget($target)
    {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(b.name) as name,b.id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
        sc.target=:target"
            )->setParameters(array('target'=>$target)) ;     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        
    }
    
      //------------------------------------------------------------------------

    public function findByBrandGenderTarget($brand_id, $gender, $target)
    {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(sc.title) as title, sc.id as id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
        b.id=:brand_id AND
        sc.gender=:gender AND
        sc.target=:target"
            )->setParameters(array('brand_id' => $brand_id, 'target' => $target, 'gender' => $gender)) ;     
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
        
    }
    
    
    
    
    
    //---------------------------------------------------------------
    //---------------------------------------------------------------
    //---------------------------------------------------------------
    //---------------------------------------------------------------
    
    
    
    //------------------------------------------------------------------------
    public function findBrandByTop($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(b.name) as brandtop,b.id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target=:target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function findBrandByBottom($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(b.name) as brandbottom ,b.id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target= :target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function findBrandByDresses($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(b.name) as branddress,b.id  FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target = :target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------

    public function findSizeByTop($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(sc.title),sc.id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target=:target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function findSizeByBottom($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(sc.title),sc.id FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target= :target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    //------------------------------------------------------------------------
    public function findSizeByDresses($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT distinct(sc.title),sc.id  FROM LoveThatFitAdminBundle:SizeChart sc
     JOIN sc.brand b    
     WHERE
     b.id=sc.brand
     AND sc.target = :target"
                        )->setParameters(array('target' => $target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findSizeChartByGender($gender) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc     
     WHERE     
     sc.gender = :gender"
                        )->setParameters(array('gender' =>$gender));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    public function findSizeChartByTarget($target) {
        $query = $this->getEntityManager()
                        ->createQuery("
     SELECT sc FROM LoveThatFitAdminBundle:SizeChart sc     
     WHERE     
     sc.target = :target"
                        )->setParameters(array('target' =>$target));
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    

}

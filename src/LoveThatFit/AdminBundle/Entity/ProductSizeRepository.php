<?php

namespace LoveThatFit\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductSizeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductSizeRepository extends EntityRepository {

    public function getProductSizeTitleArray($id) {
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT ps.title FROM LoveThatFitAdminBundle:Product p 
            JOIN p.product_sizes ps
            WHERE p.id = :id'
                        )->setParameter('id', $id);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getProductFitPointMeasurementArray($id, $fit_point) {
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT ps.title, psm.title fit_point, psm.ideal_body_size_high, psm.ideal_body_size_low
            , psm.max_body_measurement
            FROM LoveThatFitAdminBundle:Product p 
            JOIN p.product_sizes ps
            JOIN ps.product_size_measurements psm
            WHERE p.id = :id
            AND psm.title like :fit_point'
                        )->setParameters(array('id'=> $id, 'fit_point'=>$fit_point));

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    
    public function findSizeByProductTitle($title, $productid) {
        $record = $this->getEntityManager()
                ->createQuery("SELECT p FROM LoveThatFitAdminBundle:ProductSize p                                   
                                WHERE p.title = :title
                                AND p.product=:product")
                ->setParameters(array('title' => ucwords($title), 'product' => $productid));
        try {
            return $record->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getSizeMeasurementArray($id) {
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT ps.title as size, psm.id as id ,psm.title,psm.min_body_measurement, psm.garment_measurement_flat,
            psm.max_body_measurement, psm.vertical_stretch, psm.horizontal_stretch,
            psm.stretch_type_percentage, psm.ideal_body_size_high, psm.ideal_body_size_low,psm.garment_measurement_stretch_fit,psm.fit_model_measurement
            FROM LoveThatFitAdminBundle:ProductSize ps
            JOIN ps.product_size_measurements psm
            WHERE ps.id = :id'
                        )->setParameter('id', $id);
        try {
            return $query->getResult(2); //to get it in associative array
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
#----------Get  Size Array -----------------------#
      public function getSizeArrayBaseOnProduct($id) {
        $query = $this->getEntityManager()
                        ->createQuery('
            SELECT ps.id as id,ps.title as title,ps.body_type as body_type FROM LoveThatFitAdminBundle:Product p 
            JOIN p.product_sizes ps 
            WHERE p.id = :id'
                        )->setParameter('id', $id);

        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    
    public function findSizesByProductId($id) {
        $record = $this->getEntityManager()
                ->createQuery("SELECT p FROM LoveThatFitAdminBundle:ProductSize p                                   
                                WHERE p.product=:product")
                ->setParameters(array('product' => $id));
        try {
            return $record->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
}

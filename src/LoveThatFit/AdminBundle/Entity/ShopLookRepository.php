<?php

namespace LoveThatFit\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ShopLookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopLookRepository extends EntityRepository
{
    public function findAllRecord()
    {
        $bannerTableName = $this->getEntityManager()->getClassMetadata('LoveThatFitAdminBundle:ShopLook')->getTableName();
        $sql = "SELECT * FROM $bannerTableName";

        //set parameters
        $query = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $query->execute();
        $result_query = $query->fetchAll();
        return $result_query;
    }

    public function findAllAvailableRecords()
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT c FROM LoveThatFitAdminBundle:ShopLook c where c.disabled=0  order by c.id,c.sorting, c.name');
        try {
            return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    #--------------Find Banner By ID---------------------------------#
    public function search(
        $data,
        $page = 0,
        $max = NULL,
        $order,
        $getResult = true
    )
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        $search = isset($data['query']) && $data['query']?$data['query']:null;
        $query
            ->select('
            e.id,
            e.name,
            e.sorting,
            e.shop_model_image,
            e.disabled,
            e.created_at'
            )
            ->from('LoveThatFitAdminBundle:ShopLook', 'e');
        if ($search) {
            $query
                ->andWhere('e.name like :search')
                ->setParameter('search', "%".$search."%");
        }
        if (is_array($order)) {
            $orderByColumn    = $order[0]['column'];
            $orderByDirection = $order[0]['dir'];
            $query->OrderBy("e.id", $orderByDirection);
        }

        if ($max) {
            $preparedQuery = $query->getQuery()
                ->setMaxResults($max)
                ->setFirstResult(($page) * $max);
        } else {
            $preparedQuery = $query->getQuery();
        }
        return $getResult?$preparedQuery->getResult():$preparedQuery;
    }



    #--------------Increamental and Decreamental on Banner Sorrting---------------------------------#
    public function maxSortingNumber(){

        $bannerTableName = $this->getEntityManager()->getClassMetadata('LoveThatFitAdminBundle:ShopLook')->getTableName();
        $sql = "SELECT MAX(sorting) as max_sort FROM $bannerTableName";

        //set parameters
        $query = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $query->execute();
        $result_query = $query->fetchAll();
        return $result_query;
    }


    #--------------Increamental and Decreamental on Banner Sorrting---------------------------------#
    public function editBannerSorting($sorting_number, $action, $current_value = 0){

        $bannerTableName = $this->getEntityManager()->getClassMetadata('LoveThatFitAdminBundle:ShopLook')->getTableName();

        if($action == 'add'){
            $sql = "UPDATE $bannerTableName SET sorting = sorting + 1 where sorting >= :sorting_number ";
        }elseif($action == 'delete'){
            $sql = "UPDATE $bannerTableName SET sorting = sorting - 1 where sorting >= :sorting_number ";
        }elseif($action == 'update'){

            if($current_value > $sorting_number){
                //if current move to less position then +1
                $sql = "UPDATE $bannerTableName SET sorting = sorting + 1 where sorting >= :sorting_number AND sorting <= :current_value ";

            }elseif($current_value < $sorting_number){
                $sql = "UPDATE $bannerTableName SET sorting = sorting - 1 where sorting >= :current_value AND sorting <= :sorting_number ";
            }
            $params['current_value'] = $current_value;
        }
        //set parameters
        $params['sorting_number'] = $sorting_number;
        $query = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $result = $query->execute($params);

        return true;
    }

}

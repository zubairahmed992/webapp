<?php

namespace LoveThatFit\AdminBundle\Entity;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;

/**
 * RetailerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupportAdminUserRepository extends EntityRepository
{
  public function listAllSupportAdminUser($page_number = 0, $limit = 0, $sort = 'id') {


	if ($page_number <= 0 || $limit <= 0) {
	  $query = $this->getEntityManager()
		->createQuery('SELECT r FROM LoveThatFitAdminBundle:SupportAdminUser r ORDER BY r.' . $sort . ' ASC');
	} else {
	  $query = $this->getEntityManager()
		->createQuery('SELECT r FROM LoveThatFitAdminBundle:SupportAdminUser r ORDER BY r.' . $sort . ' ASC')
		->setFirstResult($limit * ($page_number - 1))
		->setMaxResults($limit);
	}
	try {
	  return $query->getResult();
	} catch (\Doctrine\ORM\NoResultException $e) {
	  return "null";
	}
  }

  /* -----End Of Function----------------- */



  public function countAllRecord() {
	$total_record = $this->getEntityManager()
	  ->createQuery('SELECT r FROM LoveThatFitAdminBundle:SupportAdminUser r');
	try {
	  return $total_record->getResult();
	} catch (\Doctrine\ORM\NoResultException $e) {
	  return null;
	}
  }


  //--------------------------------------------------------------------------

  public function findOneByUserName($user_name) {
	$record = $this->getEntityManager()
	  ->createQuery("SELECT r FROM LoveThatFitAdminBundle:SupportAdminUser r
                                WHERE r.user_name = :user_name")
	  ->setParameters(array('user_name' => $user_name));
	try {
	  return $record->getSingleResult();
	} catch (\Doctrine\ORM\NoResultException $e) {
	  return null;
	}
  }






  public function isDuplicateEmail($id, $email) {
	try {

	  $entityByEmail = $this->findOneBy(array('email' => $email));

	  if (!($id) && !($entityByEmail)) {
		return false;
	  } else {
		$entityById = $this->find($id);

		if ($entityByEmail) {
		  return ($entityByEmail->getEmail() == $entityById->getEmail()) ? false : true;
		} else {
		  return false;
		}
	  }
	} catch (\Exception $e) {
	  return $e;
	}
  }



}
